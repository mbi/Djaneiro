%YAML 1.2
---
# https://www.sublimetext.com/docs/syntax.html
# https://html.spec.whatwg.org/multipage/syntax.html
name: HTML (Django) Update
scope: text.html.django
version: 2

extends: Packages/HTML/HTML.sublime-syntax

file_extensions:
  - html
  - htm
  - shtml
  - xhtml

# match on "{% load " or "{% extends "
first_line_match: (?i){%\s?(?>load|extends)\s

variables:
  template_tags: "(
        autoescape|endautoescape|\
        block|endblock|\
        csrf_token|\
        cycle|\
        debug|\
        extends|\
        filter|endfilter|\
        firstof|\
        for|empty|endfor|\
        if|elif|else|endif|ifchanged|endifchanged|\
        include|\
        load|from|\
        lorem|\
        now|\
        regroup|by|\
        resetcycle|\
        spaceless|endspaceless|\
        templatetag|\
        url|as|\
        verbatim|endverbatim|\
        widthratio|\
        with|endwith|\
        thumbnail|endthumbnail|\
        static|get_static_prefix|get_media_prefix)"

  template_filters: "(
          add|\
          addslashes|\
          capfirst|\
          center|\
          cut|\
          date|\
          default|\
          default_if_none|\
          dictsort|\
          dictsortreversed|\
          divisibleby|\
          escape|\
          escapejs|\
          filesizeformat|\
          first|\
          floatformat|\
          force_escape|\
          get_digit|\
          iriencode|\
          join|\
          json_script|\
          last|\
          length|\
          length_is|\
          linebreaks|\
          linebreaksbr|\
          linenumbers|\
          ljust|\
          lower|\
          make_list|\
          phone2numeric|\
          pluralize|\
          pprint|\
          random|\
          rjust|\
          safe|\
          safeseq|\
          slice|\
          slugify|\
          stringformat|\
          striptags|\
          time|\
          timesince|\
          timeuntil|\
          title|\
          truncatechars|\
          truncatechars_html|\
          truncatewords|\
          truncatewords_html|\
          unordered_list|\
          upper|\
          urlencode|\
          urlize|\
          urlizetrunc|\
          wordcount|\
          wordwrap|\
          yesno)"

contexts:
  main:
    - match: ""
      push: "Packages/HTML/HTML.sublime-syntax"
      with_prototype:

        - match: "{#(?=.*#})"
          scope: punctuation.definition.comment.django
          push:
            - clear_scopes: true
            - meta_scope: text.django comment.line.django
            - include: commentline

        - match: "{%\\s*comment\\s*(\"[^\"]*\"\\s*)?%}"
          scope: punctuation.definition.comment.django
          push:
            - clear_scopes: true
            - meta_scope: text.django comment.block.django
            - include: commentblock


        - match: "{%\\s*(?=.*%})"
          scope: punctuation.section.block.begin constant.character.escape.django
          push:
            - clear_scopes: true
            - meta_scope: text.django meta.function-call.django
            - include: tagname



          # push:
          #   - meta_scope: keyword.function.django

        - match: "{{(?=.*}})"
          scope: punctuation.section.block.begin constant.character.escape.django
          push:
            - clear_scopes: true
            - meta_scope: variable.language.django
            - include: expr

  tagname:


    - match: "%}"
      scope: punctuation.section.block.end constant.character.escape.django
      pop: true

    - match: "{{template_tags}}"
      scope: keyword.function.django

    - include: tagexpr

    - match: "\\w+\\b"
      scope: variable.function.tag.django
      push: tagexpr
      with_prototype:
        - match: "\\bin\\b"
          scope: keyword.control.flow.for.in.django
        - match: "with\\b"
          scope: variable.function.tag.django
          push: withclause
        - match: "(?=%})"
          pop: true

  withclause:
    - match: "\\w+\\b"
      scope: variable.parameter.django
      push: tagexpr
      with_prototype:
        - match: "(?=%})"
          pop: true
    - match: "(?=%})"
      pop: true

  tagexpr:
    - match: "="
      scope: keyword.operator.assignment.django
    - match: "'"
      scope: punctuation.definition.string.begin.django
      push: singlestring
    - match: '"'
      scope: punctuation.definition.string.begin.django
      push: doublestring
    - match: "\\w+"
      scope: meta.generic-name.django

  singlestring:
    - meta_scope: string.quoted.single.django
    - match: \'
      scope: punctuation.definition.string.end.django
      pop: true

  doublestring:
    - meta_scope: string.quoted.double.django
    - match: \"
      scope: punctuation.definition.string.end.django
      pop: true

  expr:
    - match: "'"
      scope: punctuation.definition.string.begin.django
      push: singlestring
    - match: '"'
      scope: punctuation.definition.string.begin.django
      push: doublestring
    - match: "\\|"
      push: exprfilter
    - match: "(\\w+)"
      scope: entity.name.variable
    - match: "}}"
      scope: punctuation.section.block.end constant.character.escape.django
      pop: true

  exprfilter:
    - meta_content_scope: variable.function.filter.django
    # End the filter expression when we encounter anything that can't be part of the filter name,
    # typically a space, a colon (e.g. {{var|filter:arg}}), or the closing }}.
    # We use a look-ahead so that we don't swallow the curly bracket, as if we do then the `expr`
    # context won't be able to match "}}".
    - match: "{{template_filters}}"
      scope: entity.name.tag

    - match: "(?=[^\\w])"
      pop: true


  commentline:
    - match: "#}"
      scope: punctuation.definition.comment.django
      pop: true

  commentblock:
    - match: "{%\\s*endcomment\\s*%}"
      scope: punctuation.definition.comment.django
      pop: true

